import java.awt.*;
import java.awt.event.ActionEvent;
import java.util.ArrayList;
import java.util.List;

import javax.swing.*;

import org.simbrain.network.*;
import org.simbrain.network.desktop.*;
import org.simbrain.network.connections.*;
import org.simbrain.network.core.*;
import org.simbrain.network.desktop.*;
import org.simbrain.network.layouts.*;
import org.simbrain.network.networks.*;
import org.simbrain.network.neuron_update_rules.*;
import org.simbrain.network.synapse_update_rules.*;
import org.simbrain.network.gui.*;
import org.simbrain.workspace.*;
import org.simbrain.workspace.gui.*;
import org.simbrain.util.*;

{

	// Parameters.  Change these values to customize the lesson.
	int NUM_NEURONS = 25;	// Number of neurons in auto-associative network with Hebbian synapses
	int TRAINING_ITERATIONS = 25; // Number of iterations to use when pressing "train"
	double LEARNING_RATE = .1; // Learning rate of Hebbian synapses
	double GRID_SPACE = 50; // Space between neurons horizontally and vertically

    // Init workspace
    workspace.clearWorkspace();

    // Create network component 
	NetworkComponent networkComponent = new NetworkComponent("Auto-Associative Network");
	final Network network = networkComponent.getNetwork();
	workspace.addWorkspaceComponent(networkComponent);

	// Get a reference to the network panel
	NetworkPanel networkPanel = ((NetworkDesktopComponent) desktop
			.getDesktopComponent("Auto-Associative Network"))
			.getNetworkPanel();


	// Create Hopfield network
	GridLayout layout = new GridLayout(GRID_SPACE, GRID_SPACE, 5);
	layout.setInitialLocation(new Point(10, 10));
	List sourceNeurons = new ArrayList();
	for (int i = 0; i < NUM_NEURONS; i++) {
		Neuron neuron = new Neuron(network, "AdditiveRule");
		neuron.setActivation(-1);
		network.addNeuron(neuron);
		neuron.setUpperBound(10); // This is for nicer graphics
		neuron.setLowerBound(-10); // This is for nicer graphics
		sourceNeurons.add(neuron);
	}
	network.setTimeStep(.1);
	layout.layoutNeurons(network.getNeuronList());

	// Connect neurons
	//AllToAll connection = new AllToAll(network, network.getFlatNeuronList(), network.getFlatNeuronList());
	Sparse connection = new Sparse(network, network.getFlatNeuronList(), network.getFlatNeuronList());
	Synapse synapse = Synapse.getTemplateSynapse("HebbianRule");
	synapse.setUpperBound(5);
	synapse.setLowerBound(-5);
	synapse.setStrength(0);
	((HebbianRule)synapse.getLearningRule()).setLearningRate(LEARNING_RATE);
	connection.setSparsity(.8);
	connection.setBaseExcitatorySynapse(synapse);
	connection.setBaseInhibitorySynapse(synapse);
	connection.connectNeurons();

	// Create a control panel with buttons 
	JInternalFrame internalFrame = new JInternalFrame("Controls",
			true, true);
	JPanel panel = new JPanel(new java.awt.GridLayout(7,1));

	// + Pattern
	SimbrainButton plusPattern = new SimbrainButton("+ Pattern", workspace);
	plusPattern.addActionListener(new ActionListener() {
		public void actionPerformed(ActionEvent arg0) {
			networkPanel.setWeightsVisible(true);
			network.setActivations(new double[] 
					{-1,-1,1,-1,-1,
					-1,-1,1,-1,-1,
					1,1,1,1,1,
					-1,-1,1,-1,-1,
					-1,-1,1,-1,-1});
			network.fireNetworkChanged();
		}
	});
	panel.add(plusPattern);

	// O Pattern
	SimbrainButton oPattern = new SimbrainButton("O Pattern", workspace);
	oPattern.addActionListener(new ActionListener() {
		public void actionPerformed(ActionEvent arg0) {
			networkPanel.setWeightsVisible(true);
			network.setActivations(new double[] 
					{-1,1,1,1,-1,
					1,-1,-1,-1,1,
					1,-1,-1,-1,1,
					1,-1,-1,-1,1,
					-1,1,1,1,-1});
			network.fireNetworkChanged();
		}
	});
	panel.add(oPattern);

	// X Pattern 
	SimbrainButton xPattern = new SimbrainButton("X Pattern", workspace);
	xPattern.addActionListener(new ActionListener() {
		public void actionPerformed(ActionEvent arg0) {
			networkPanel.setWeightsVisible(true);
			network.setActivations(new double[] 
					{1,-1,-1,-1,1,
					-1,1,-1,1,-1,
					-1,-1,1,-1,-1,
					-1,1,-1,1,-1,
					1,-1,-1,-1,1});
			network.fireNetworkChanged();
		}
	});
	panel.add(xPattern);

	// Train Button
	SimbrainButton trainButton = new SimbrainButton("Train current pattern", workspace);
	trainButton.addActionListener(new ActionListener() {
		public void actionPerformed(ActionEvent arg0) {
			networkPanel.setWeightsVisible(true);
			network.setClampNeurons(true);
			network.setClampWeights(false);
			workspace.iterate(TRAINING_ITERATIONS);
		}
	});
	panel.add(trainButton);

	// Randomize and test
	SimbrainButton testPattern = new SimbrainButton("Test using random pattern", workspace);
	testPattern.addActionListener(new ActionListener() {
		public void actionPerformed(ActionEvent arg0) {
			networkPanel.setWeightsVisible(false);
			network.setClampNeurons(false);
			network.setClampWeights(true);
			network.randomizeNeurons();
			workspace.iterate(50);
		}
	});
	panel.add(testPattern);

	// Test mode
	SimbrainButton testingMode = new SimbrainButton("Test retrieval manually", workspace);
	testingMode.addActionListener(new ActionListener() {
		public void actionPerformed(ActionEvent arg0) {
			networkPanel.setWeightsVisible(false);
			network.setClampNeurons(false);
			network.setClampWeights(true);
			network.setActivations(0);
			network.fireNetworkChanged();
		}
	});
	panel.add(testingMode);                            
	
	// Reset simulation
	SimbrainButton clearButton = new SimbrainButton("Reset simulation", workspace);
	clearButton.addActionListener(new ActionListener() {
		public void actionPerformed(ActionEvent arg0) {
			networkPanel.setWeightsVisible(true);
			network.setActivations(-1);
			network.setWeights(0);
			network.fireNetworkChanged();
		}
	});
	panel.add(clearButton);

	// Add and display button panel
	internalFrame.getContentPane().add(panel);
	internalFrame.setVisible(true);
	internalFrame.pack();
	desktop.addInternalFrame(internalFrame);

	// Locate network in relation to button panel
	int net_width = 450;
	int net_height = 450;
	int panel_width = internalFrame.getBounds().getWidth();
	int panel_height = internalFrame.getBounds().getHeight();
	int x = internalFrame.getBounds().getX() + (panel_height) + 5;
	int y = internalFrame.getBounds().getY() + (panel_width/2) - (net_width/2);
	desktop.getDesktopComponent(networkComponent).getParentFrame()
		.setBounds(x, y, net_width, net_height);
}
