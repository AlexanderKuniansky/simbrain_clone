import java.awt.Point;
import org.simbrain.network.*;
import org.simbrain.network.connections.*;
import org.simbrain.network.interfaces.*;
import org.simbrain.network.layouts.*;
import org.simbrain.network.layouts.LineLayout.LineOrientation;
import org.simbrain.network.neurons.*;
import org.simbrain.network.synapses.*;
import org.simbrain.network.builders.*;
import org.simbrain.trainer.*;
import org.simbrain.world.dataworld.*;
import org.simbrain.workspace.*;
import java.awt.Color;
import java.io.*;

{
        // Directory info for input / training files
        String FS = System.getProperty("file.separator");
        String baseDir = "scripts" + FS + "scriptmenu" + FS;
    
        // Build network
        RootNetwork network = new RootNetwork();
        LayeredNetworkBuilder builder = new LayeredNetworkBuilder();
        int[] nodesPerLayer = new int[]{2,4,4,1};
        builder.setNodesPerLayer(nodesPerLayer);
        builder.buildNetwork(network);
        
        // Bias all but input neurons
        network.randomizeBiases(-1,1);
        for(Neuron neuron : network.getGroup("Group_1").getNeuronList()) {
            if (neuron instanceof BiasedNeuron) {
                ((BiasedNeuron)neuron).setBias(0);
            }
        }

        // Add neural network
        NetworkComponent networkComponent = new NetworkComponent("Backprop Network", network);
    	workspace.addWorkspaceComponent(networkComponent);

    	// Train network
        BackpropTrainer trainer = new BackpropTrainer(network);
        trainer.setLearningRate(.9);
        trainer.setInputLayer(network.getGroup("Group_1").getNeuronList());
        trainer.setOutputLayer(network.getGroup("Group_" + nodesPerLayer.length).getNeuronList());
        trainer.setInputData(new File(baseDir + "inputData.csv"));
        trainer.setTrainingData(new File(baseDir + "trainingData.csv"));
        trainer.init();
        int epochs = 10000;
        for (int i = 0; i < epochs; i++) {
            double error = trainer.train(1);
            System.out.println("Epoch " + i + ", error = " + error);
        }
        
    	// Create data table
        DataWorldComponent inputData = new DataWorldComponent("Input Data",4,2);
        workspace.addWorkspaceComponent(inputData);
        inputData.readData(new File(baseDir + "inputData.csv"));
        inputData.getDataModel().setIterationMode(true);
        desktop.getDesktopComponent(inputData).getParentFrame().setLocation(508, 59);
        
        // Coupling input table columns to input neurons of backprop network
        ProducingAttribute column1 = inputData.getSingleProducingAttribute("Column1");
        ProducingAttribute column2 = inputData.getSingleProducingAttribute("Column2");
        ConsumingAttribute inputNeuron1 = networkComponent.getConsumingAttribute("Neuron_1", "Activation"); 
        ConsumingAttribute inputNeuron2 = networkComponent.getConsumingAttribute("Neuron_2", "Activation"); 
        workspace.getCouplingManager().addCoupling(new Coupling(column1, inputNeuron1));
        workspace.getCouplingManager().addCoupling(new Coupling(column2, inputNeuron2));
        
}
