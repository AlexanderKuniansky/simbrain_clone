import org.simbrain.network.NetworkComponent;
import org.simbrain.network.connections.*;
import org.simbrain.network.core.*;
import org.simbrain.network.layouts.*;
import org.simbrain.network.networks.*;
import org.simbrain.network.neurons.*;
import org.simbrain.workspace.*;

//
// Create a network with radialÂ simple connection.   Manipulate the parameters to get a feel for how the 
// the connection type works. Run and activate nodes with the wand to see the resulting
// network dynamics. 
//
{

    // Parameters 
    int NUM_NEURONS = 100;
    double GRID_SPACE = 50;
    double INHIBITORY_PROB = .05;
    double INHIBITORY_RADIUS = 200;
    double EXCITATORY_PROB = .2;
    double EXCITATORY_RADIUS = 100;

    // Build Network
    NetworkComponent networkComponent = new NetworkComponent("Network");
    workspace.addWorkspaceComponent(networkComponent);
    Network network = networkComponent.getNetwork();
    GridLayout layout = new GridLayout(GRID_SPACE, GRID_SPACE, (int) Math.sqrt(NUM_NEURONS));
    layout.setInitialLocation(new Point(10, 10));
    for (int i = 0; i < NUM_NEURONS; i++) {
        Neuron neuron = new Neuron(network, "NakaRushtonRule");
        network.addNeuron(neuron);
    }
    layout.layoutNeurons(network.getNeuronList());
    RadialSimple connection = new RadialSimple(network, network.getNeuronList());
    connection.setExcitatoryProbability(EXCITATORY_PROB);
    connection.setInhibitoryProbability(INHIBITORY_PROB);
    connection.setExcitatoryRadius(EXCITATORY_RADIUS);
    connection.setInhibitoryRadius(INHIBITORY_RADIUS);
    connection.connectNeurons(true);
    network.randomizeNeurons();

}