import java.awt.geom.Point2D;
import java.util.*;
import org.simbrain.network.NetworkComponent;
import org.simbrain.network.connections.*;
import org.simbrain.network.core.*;
import org.simbrain.network.core.NeuronUpdateRule.InputType;
import org.simbrain.network.groups.*;
import org.simbrain.network.layouts.*;
import org.simbrain.network.networks.*;
import org.simbrain.network.neurons.*;
import org.simbrain.network.neuron_update_rules.*;
import org.simbrain.network.synapse_update_rules.spikeresponders.*;
import org.simbrain.util.randomizer.*;
import org.simbrain.util.SimbrainConstants.Polarity;
import org.simbrain.util.math.*;
import org.simbrain.workspace.*;

//
// Recurrent network using radial
//
{

    // Parameters 
    int NUM_NEURONS = 400;
    double GRID_SPACE = 50;
    double EE_CONST = 0.3;
    double EI_CONST = 0.2;
    double IE_CONST = 0.4;
    double II_CONST = 0.1;
    double LAMBDA = 150;

    // Build Network
    NetworkComponent networkComponent = new NetworkComponent("Network");
    workspace.addWorkspaceComponent(networkComponent);
    Network network = networkComponent.getNetwork();
    GridLayout layout = new GridLayout(GRID_SPACE, GRID_SPACE, (int) Math.sqrt(NUM_NEURONS));
    layout.setInitialLocation(new Point(10, 10));
    GridLayout layout2 = new GridLayout(GRID_SPACE, GRID_SPACE, (int) Math.sqrt(NUM_NEURONS));
    layout2.setInitialLocation(new Point(400, 10));
    List<Neuron> neurons = new ArrayList<Neuron>(NUM_NEURONS);
    List<Neuron> outNeurons = new ArrayList<Neuron>(NUM_NEURONS);
    for (int i = 0; i < NUM_NEURONS; i++) {
        Neuron neuron = new Neuron(network, "IzhikevichRule");
        neuron.setUpperBound(100);
        neurons.add(neuron);
        if (Math.random() < 0.25) {
        	neuron.setPolarity(Polarity.INHIBITORY);
        } else {
        	neuron.setPolarity(Polarity.EXCITATORY);
        }
        Neuron outNeuron = new Neuron(network);
        outNeuron.getUpdateRule().setInputType(InputType.SYNAPTIC);
        ((LinearRule) outNeuron.getUpdateRule()).setClipped(false);
        outNeurons.add(outNeuron);
    }
    NeuronGroup ng1 = new NeuronGroup(network, neurons);
    ng1.setLabel("Izhikevich Network");
    NeuronGroup outs = new NeuronGroup(network, outNeurons);
    outs.setLabel("Exponential Convolution");
    network.addGroup(ng1);
    network.addGroup(outs);
    ng1.setLayout(layout);
    ng1.applyLayout(new Point2D.Double(0.0 ,0.0));
    outs.setLayout(layout2);
    outs.applyLayout(new Point2D.Double(1000.0, 0.0));

	PolarizedRandomizer exRand = new PolarizedRandomizer(Polarity.EXCITATORY,
		ProbDistribution.LOGNORMAL);
	PolarizedRandomizer inRand = new PolarizedRandomizer(Polarity.INHIBITORY,
		ProbDistribution.LOGNORMAL);
	exRand.setParam1(2.5);
	inRand.setParam1(3.5);	

	Radial rCon = new Radial(EE_CONST, EI_CONST, IE_CONST, II_CONST, LAMBDA);
	SynapseGroup sg = SynapseGroup.createSynapseGroup(ng1, ng1, rCon, 0.5, exRand, inRand);
	sg.setSpikeResponder(new ConvolvedJumpAndDecay(), Polarity.BOTH);
	sg.setLabel("Recurrent Synapses");
	for (Synapse s : sg.getAllSynapses()) {
		double dist = Network.getEuclideanDist(s.getSource(), s.getTarget());
		s.setDelay((int) (Math.log(dist * dist) / Math.log(2)));
	}
	network.addGroup(sg);

	SynapseGroup outCon = SynapseGroup.createSynapseGroup(ng1, outs, new OneToOne());
	outCon.setSpikeResponder(new ConvolvedJumpAndDecay(), Polarity.BOTH);
	outCon.setLabel("One to One Connections");
	network.addGroup(outCon);

    print(sg.size());
    sg.setUpperBound(70, Polarity.EXCITATORY);
    sg.setLowerBound(-70, Polarity.INHIBITORY);
    network.randomizeNeurons();
    network.fireSynapsesUpdated();

}
