import java.awt.Point;
import java.awt.geom.Point2D;
import java.util.*;
import org.simbrain.network.neurons.*;
import org.simbrain.network.*;
import org.simbrain.network.connections.*;
import org.simbrain.network.interfaces.*;
import org.simbrain.network.layouts.*;
import org.simbrain.network.layouts.LineLayout.LineOrientation;
import org.simbrain.network.neurons.*;
import org.simbrain.network.synapses.*;
import org.simbrain.network.desktop.NetworkDesktopComponent;
import org.simbrain.workspace.*;
import org.simbrain.world.odorworld.*;
import org.simbrain.world.odorworld.sensors.*;
import org.simbrain.world.odorworld.entities.*;
import org.simbrain.util.*;
import org.simbrain.util.environment.SmellSource;
import org.simbrain.plot.projection.*;

{

	// Variables
	int worldHeight = 500;
	int worldWidth = 400;

        // Make a 2-d environment
        OdorWorldComponent odorWorld = new OdorWorldComponent("Odor World");
	OdorWorld world = odorWorld.getWorld();
        workspace.addWorkspaceComponent(odorWorld);
        desktop.getDesktopComponent(odorWorld).getParentFrame().setBounds(470, 38, worldWidth, worldHeight);
        
	// Add agent to environment
	RotatingEntity mouse = new RotatingEntity();
    	mouse.setLocation(162,200);
	world.addEntity(mouse);
	mouse.addSensor(new SmellSensor(mouse));
	
	// Add objects
	BasicEntity object1 = new BasicEntity("Swiss.gif");
	object1.setLocation(36,107);
	object1.setSmellSource(
                new SmellSource(SimbrainMath.multVector(new double[]{0.7,0.3,0.0,0.0,0.0,0.0,0.0,0.0}
                , 100),
                SmellSource.DecayFunction.GAUSSIAN, 
                object1.getLocation()));
	world.addEntity(object1);	

	BasicEntity object2 = new BasicEntity("Gouda.gif");
	object2.setLocation(169,32);
	object2.setSmellSource(
                new SmellSource(SimbrainMath.multVector(new double[]{0.7,0.0,0.3,0.0,0.0,0.0,0.0,0.0}
                , 100),
                SmellSource.DecayFunction.GAUSSIAN, 
                object1.getLocation()));
	world.addEntity(object2);	

	BasicEntity object3 = new BasicEntity("Bluecheese.gif");
	object3.setLocation(304,87);
	object3.setSmellSource(
                new SmellSource(SimbrainMath.multVector(new double[]{0.7,0.0,0.0,0.0,0.3,0.0,0.0,0.0}
                , 100),
                SmellSource.DecayFunction.GAUSSIAN, 
                object1.getLocation()));
	world.addEntity(object3);

	BasicEntity object4 = new BasicEntity("Tulip.gif");
	object4.setLocation(80,351);
	object4.setSmellSource(
                new SmellSource(SimbrainMath.multVector(new double[]{0.0,0.3,0.0,0.7,0.0,0.0,0.0,0.0}
                , 100),
                SmellSource.DecayFunction.GAUSSIAN, 
                object1.getLocation()));
	world.addEntity(object4);
	
	BasicEntity object5 = new BasicEntity("Pansy.gif");
	object5.setLocation(251,370);
	object5.setSmellSource(
                new SmellSource(SimbrainMath.multVector(new double[]{0.0,0.0,0.3,0.7,0.0,0.0,0.0,0.0}
                , 100),
                SmellSource.DecayFunction.GAUSSIAN, 
                object1.getLocation()));
	world.addEntity(object5);	
	
	
	// Add Recurrent network
	source("../simbrain/scripts/scriptmenu/sparseNetwork3.bsh");
	NetworkComponent networkComponent = workspace.getComponent("Recurrent Network");
	RootNetwork network = networkComponent.getRootNetwork();
	List targetNeurons = network.getFlatNeuronList();
	List sourceNeurons = new ArrayList();

	// Add input layer to recurrent network
	LineLayout layout = new LineLayout(-20,350,70, LineOrientation.HORIZONTAL);
   	for (int i = 0; i < 5; i++) {
	    LinearNeuron neuron = new LinearNeuron();
	    neuron.setLowerBound(0);
	    neuron.setUpperBound(100);
	    network.addNeuron(neuron);
	    sourceNeurons.add(neuron);
    	}
        layout.layoutNeurons(sourceNeurons);
	((NetworkDesktopComponent)desktop.getDesktopComponent(networkComponent)).getNetworkPanel().centerCamera();

	// Connect input layer to output layer with Hebbian synapses
	Sparse sparseConnect = new Sparse(network, sourceNeurons, targetNeurons);
	//sparseConnect.setBaseExcitatorySynapse(new Hebbian(null, null));
        sparseConnect.setInhibitoryProbability(0);
        sparseConnect.setExcitatoryProbability(.2);
    	sparseConnect.connectNeurons();
	
	// Couple odor world to network
	ProducingAttribute smell1 = odorWorld.getProducingAttribute("Smell sensor","Smell-1");
        ProducingAttribute smell2 = odorWorld.getProducingAttribute("Smell sensor","Smell-2");
        ProducingAttribute smell3 = odorWorld.getProducingAttribute("Smell sensor","Smell-3");
        ProducingAttribute smell4 = odorWorld.getProducingAttribute("Smell sensor","Smell-4");
        ProducingAttribute smell5 = odorWorld.getProducingAttribute("Smell sensor","Smell-5");
        ConsumingAttribute inputNeuron1 = networkComponent.getConsumingAttribute("Neuron_26", "Activation"); 
        ConsumingAttribute inputNeuron2 = networkComponent.getConsumingAttribute("Neuron_27", "Activation"); 
        ConsumingAttribute inputNeuron3 = networkComponent.getConsumingAttribute("Neuron_28", "Activation"); 
        ConsumingAttribute inputNeuron4 = networkComponent.getConsumingAttribute("Neuron_29", "Activation"); 
        ConsumingAttribute inputNeuron5 = networkComponent.getConsumingAttribute("Neuron_30", "Activation"); 
        workspace.getCouplingManager().addCoupling(new Coupling(smell1, inputNeuron1));
        workspace. getCouplingManager().addCoupling(new Coupling(smell2, inputNeuron2));
        workspace.getCouplingManager().addCoupling(new Coupling(smell3, inputNeuron3));
        workspace. getCouplingManager().addCoupling(new Coupling(smell4, inputNeuron4));
        workspace. getCouplingManager().addCoupling(new Coupling(smell5, inputNeuron5));
	
	// Create projection plot
        ProjectionComponent chart = new ProjectionComponent("Network Projection");
        workspace.addWorkspaceComponent(chart);
        desktop.getDesktopComponent(chart).getParentFrame().setBounds(890, 38, 400, worldHeight);
	
	// Couple network to projection chart
	for (int i = 1; i < 25; i++) {
            ProducingAttribute neuronAttribute = networkComponent.getProducingAttribute("Neuron_" + i, "Activation"); 
            ConsumingAttribute chartAttribute = chart.getSingleConsumingAttribute("Dimension" + i);
            workspace.getCouplingManager().addCoupling(new Coupling(neuronAttribute, chartAttribute));
        }



 
}