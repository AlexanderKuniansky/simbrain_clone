<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
"http://www.w3.org/TR/html4/loose.dtd">
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
<title>Control</title>
<link href="Styles.css" rel="stylesheet" type="text/css">

</head>

<body>
<p><span class="heading">Sensory-Motor Control </span></p>
<p>A major task accomplished by real and artificial agents is sensori-motor control, that is, responding appropriately to a dynamically changing environment. Indeed, there is a whole area of engineering and math devoted to this called &quot;control theory.&quot;</p>
<p>Our human neural networks are clearly very good at this, and it's all the more impressive given the massive amount of information they are bombarded with. In reaching for a loaf of bread, catching a ball, or combing my hair, I have to react to  millions of signals at my sensory receptors to produce the correct millions of singnals in return. How would this be modelled in a neural network? On a first pass, by a vector-valued-function, a map, which takes a long list of input values, a sensory vector, and associates it with a long list of output values, a motor vector. How does this function work? </p>
<p>The topic is a big one both in industrial applications of neural networks and in cognitive modeling. Artificial neural networks turn out to be quite good at controlling complex processes, which is not suprising since our biological neural networks do it so well. We can begin, however, with a very simple simulation, which shows how even very small systems with only a handful of neurons can manage themselves nicely in a complex and changing environment.</p>
<p class="heading2">Valentino Braitenberg </p>
<p><img src="images/braiten.portrait.gif" width="242" height="225"></p>
<p>We saw in a another module that Valentino Braitenberg was a pioneer in neural modeling right through the dark years of the 1970's, and was affilitated with the earlier cybernetics movement. He showed that what seem like complex behaviors requiring a vital force or &quot;mind,&quot; can emerge from the collective activity of very simple processing units. </p>
<p>In this module we consider the first four chapters of his book, <em>Vehicles</em>, in which  behaviors corresponding to such seemingly weighty concepts as life, love, and systems of values are produced by networks of just a few neurons. Some of these vehicles have been implemented in Simbrain. See the folder <span class="command">simulations &gt; sims &gt; vehicles.</span></p>
<p class="heading2">Vehicle 1: Life </p>
<p>This is Braitenberg's simplest vehicle: it uses two neurons and one synapse to control a robot which runs semi-randomly through its world. One neuron is a sensor, which registers the absolute temperature (degrees Kelvin). The other neuron is a motor-neuron, which makes the creature move forward. The two neurons are linked by a single connection. The result is a creature that moves forward quickly when it's hot and slowly when its cold. Friction also acts on the creature, perturbing its forward motion and making its behavior appear more random. Here is how it looks in Simbrain:</p>
<p><img src="images/vehicle1.png" width="705" height="382"></p>
<p>Note that our &quot;vehicle&quot; is a mouse (on the right above) and our &quot;heat source&quot; is a fish. The sensor node, labeled &quot;Center 1,&quot; reacts to a fishy smell. Heat and fish smell are the same from the standpoint of input vectors:  numbers arrive at a set of sensory neurons (in this case one sensory neuron) and those numbers change depending on how far the creature is from the object. </p>
<p>Now that we've got a temperature-like environment, we need a neuron that reacts to it.  This shows up in the simbrain simulation as an arrow going &quot;in&quot; to the neuron. We also want to be sure we chooose the right processing model or activation functions for the model neurons. But this sensory neuron does not really process information in any complex way; it simply picks up data from the environment and passes it on to the motor neuron. To capture this we will the identity function: a linear activation function, with bias 0 and slope 1. To see how this works, try moving the fish around and seeing the impact this has on the creature (to stop the creature from running around you can set <span class="command">interaction mode</span> to net-to-world, which shows as <img src="images/interaction_mode_to_network.gif" width="18" height="18">, when you do this. Afterwards you can set it back to both-ways, <img src="images/interaction_mode_both.gif" width="18" height="18"> ). </p>
<p>The motor node acts similarly to a motor in a real vehicle, providing propulsion. In Simbrain, the motor node is an output node (designated by an arrow facing &quot;out&quot; of the neuron), connected to a motor command, in this case &quot;forward.&quot; As with the sensory neuron, we have no fancy processing needs, so we use the same identity activation function. The mouse will move forward depending on how active this output node is. </p>
<p>The neurons are connected in a very simple way. The output of the sensory neuron feeds directly into the motor neuron. This is visible above as a line terminiating in a red dot. It has a strength of 1, which means that the output of the sensory neuron is multiplied by 1, and then added to the motor neuron. You can imagine that activation &quot;flows&quot; up the line from the sensory neuron to the motor neuron. So we have a very simple network, which essentially just passes inputs directly to outputs. </p>
<p>Considered as a whole network which computes a vector-valued function, this network (not counting the two nodes to the right) computes the identity function: the outputs it produces just are its outputs. Since inputs are fish smell, and outputs are forward movement, this network moves forward in reaction to, and proportional to, presence of fish smell. </p>
<p>Currently there is no model of friction in Simbrain. However, we can capture the impact of friction by adding a third and fourth neuron which, when activated, push the creature left and right. We give this neuron a random activation function. When the network runs, this means that the vehcile will occasionally (depending on the parameters of the random activation function) be pushed left or right.</p>
<p>The result is a mouse that mostly moves forward, speeds up around fish, and is a bit erratic. As Braitenberg says, with a few modifications, &quot;it is restless... and does not like [fish].. but it is quite stupid, sinc eit is not able to turn back to the nice [fishless spot]... Anyway, you would say, it is ALIVE, since you have never seen a particle of dead matter move around like that&quot; (p. 5). </p>
<p class="heading2">Vehicle 2: Dislike</p>
<p>Vehicle 2 (really vehicles 2--there is a family of them) adds a second sensor and a second motor to the mix, with correspondingly more interesting behavior. The sensors are located on the left and right of the vehicle, as are the motors, which allow it to move forward (both motors turn at same speed) or turn (one motor turns faster than the other). We can now make the robot do more interesting, seemingly intelligent things. </p>
<p>By crossing connections from left sensor to right motor and right sensor to left motor, for example, we can make it &quot;run away&quot; from heat sources (this vehicles is a &quot;coward&quot;); or, by connecting straight from left sensory to left motor and right sensory to right motor, we get a vehicle which is &quot;aggressive,&quot; it moves towards heat sources. Hence, two versions of &quot;disliking&quot; something.</p>
<p>Here is a Simbrain model of aggression:</p>
<p><img src="images/vehicle2b.png" width="703" height="392"></p>
<p><br>
  The sensors for this vehicle are no problem: simbrain comes set up with three &quot;whisker locations&quot; for the mice: left, center, and right (the precise location of the left and right sensors can also be set). As with Vehicle 1, we use the identity function to directly pick up environmental inputs. However, Simbrain does not have any built in mechanism to emulate differentially placed wheels, opting instead for directional movement commands like &quot;left&quot; and &quot;right.&quot; To emulate the action of real wheels, we can use pairs of motor neurons: a forward and a right neuron for the right wheel, and a forward and a left neuron for the left wheel. Now, when the forward/left pair is more active than the forward/right pair of neurons, the vehicle will turn left; when both are equally active it goes forward, etc. Notice also that we can get the desired result simply by using the same forward neuron for both left and right. We again use a fish as our source of environmental emissions; fish do indeed emit &quot;stuff that excites.. sensors&quot; (6), and set <span class="command">dispersion</span> to be more or less as large as the world (to see this, double click on the fish and click on the <span class="command">stimulus dispersion</span> tab), so that wherever the mouse is it will smell some fish and react.</p>
<p>Again you can get a feel for the network by setting <span class="command">interaction mode</span> to net-to-world. Drag the mouse to the left and right of the fish and note that depending on whether the mouse is to the left or right of the fish, the left or right sensor will be more or less active. When the fish is to the left, there is more activity on the left motor neuron than on the right, which means that it turns left. Similarly with right. So: fish to left, move to left; fish to right, move to right. Forward movement is just proportional to total fish input. The result is aggressive behavior (with just 5 neurons!). If you run the network by pressing the <span class="command">play button</span> in the network panel, you will see that the mouse moves, at first slowly, and then rapidly, aggressively, towards the fish. </p>
<p>Considered as a vector valued function, this one associates 2-dimensional sensory vectors (left sensor, right sensory) with 3-dimensional motor output vectors (move left, move forward, move right). </p>
<blockquote>
  <p><em>f</em> (left1, right1) = left1, left1 + right1, right1. </p>
</blockquote>
<p>That's all it takes to get succesful, and seemingly intelligent behavior.</p>
<p>The second Braitenberg vehicle, 2b, does the opposite of the first: it moves right when the fish is to the left, and moves left when the fish is the right. That is, it moves <em>away</em> from the fish, and it does so more quickly the closer the fish is. This vehicle is <em>cowardly</em>. To implement this we simply duplicate the aggression network and cross the connections, so that the left sensory goes to the right motor and vice versa. What a difference a crossed connection makes to overall behavior! </p>
<p>Note that the workspace attract.xml is just like vehicle 2a, the aggressive network, except that it always moves forward at a fixed amount, being stopped only by the physical presence of the fish. This creature does not acelerate, it just barrels ahead. The workspace repulse.xml is like 2b, the fearful network, except it's always running away at the same speed. </p>
<p class="heading2">Vehicle 3: Aggression to love, fear to curiosity, and the emergence of values </p>
<p>The third set of vehicles makes another incremental change to the overall architecture, again with seemingly dramatic &quot;psychological&quot; results. </p>
<p>In this case, we have a vehicle which is always moving forward and only slowing down when in the presence of the relevant source, in our case fish again. To capture the constant forward movement we add a bias term to the forward movement neuron, and to diminish the impact of this bias term we make the right and left sensors <em>inhibit</em> the forward neuron (that is, we make the relevant weights have negative strength). Thus where we previosly saw red, &quot;excitatory&quot; synapses, we now see blue &quot;inhibitory&quot; synapses. So this network is more likely to move forward  when there is <em>nothing</em> in its environment. </p>
<p>The rest of the architecture is the same as before. Making this switch for the aggressive vehicle produces a &quot;loving&quot; one (you see, aggression can be channeled into love =), which does not just ram in to the object of its desire, but rather moves up slowly to it and then comes to a rest. </p>
<p>In the case of the fear network the switch produces something more like curiosity, a vehicle which slows down in the presence of fish, and orients itself away, staying on the lookout for other objects of interest.</p>
<p>Vehicle 3c is a combination of most of the others. In Simbrain we simply concatenate them into one big network (open workspace <span class="command">vehicles &gt; vehicle3.c)</span>. The behavior of this net is that it is aggressive towards fish, afraid of blue cheese, in love with Gouda, and curious about Swiss. It is violently anti-fish and quite discriminating about its cheese. (It also has the capacity to eat things! This is set in the <span class="command">miscellaneous</span> tab of the odor world object dialogs). As Braitenberg says, &quot;you cannot help admitting that vehicle 3c has a system of VALUES&quot; (p. 12). </p>
<p><span class="heading2">Vehicle 4: Values and Special Tastes </span></p>
<p>In chapter 4 Braitenberg makes one last modification to his vehicles. Actually the change can also be thought of as being a change in the environment they are situated in (which drives home an important point: much of intelligent behavior depends not just an internal processing of an agent, but on the structure of the environment an agent is embedded in). </p>
<p>What he does is make the impact of an object on a sensor vary in a non-linear way on distance from the sensor to the object, where the peak activation of the sensor may be some distance from stimulus. For example, we can imagine that the object has its greatest affect on the agent when it is 20 pixels away, or 100 pixels away. To model this in Simbrain you can set  the <span class="command">entity dialog &gt; stimulus dispersion &gt; peak value</span> field to 20 or 100.</p>
<p>For example, try opening workspace<span class="command"> vehicles &gt; vehicle2a.xml </span>and setting the peak value of the fish to 50 and selecting a Gaussian decay function (a bell shaped curve, like the one in the text). If you run the network you will see that the mouse orbits the fish like a planet, aggressively pursuing that range of perfect, maximal fish smell. Doing the same for the fearful network will create a mouse which wants nothing to do with that orbit, sticking instead either close to the fish or far away from it. </p>
<p>&nbsp;</p>
</body>
</html>
