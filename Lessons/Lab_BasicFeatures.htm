<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
"http://www.w3.org/TR/html4/loose.dtd">
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
<title>Lab</title>
<link href="Styles.css" rel="stylesheet" type="text/css">
</head>

<body>
<h2 class="heading"> Lab: Basic Features of Neural Networks</h2>
<p class="heading2">Compare distributed and local representations. </p>
<p>In this lab you will create a world with four objects, two of which will have distributed representations, two of which will have local representations. When you are done, export the workspace and email it to me.</p>
<p>1. Create a new odor world with an agent and four objects.</p>
<ul>
  <li>Start by clearing the workspace and creating a new odor world.</li>
  <li>  Add an object to the world using <span class="command">right click &gt; add new object</span></li>
  <li>Repeat until the world has four objects within it.</li>
  <li>Change each object to a different image using <span class="command">right click &gt; set object properties</span> from the context menu. Select the image to be used for the object from the drop down list at the top of the object properties window. The image itself has no bearing on how the object works, it is only to make them easier to distinguish from one another. </li>
  <li>Arrange the objects so they have adequate space between them.</li>
  <li>Add an agent to the world using the right mouse click and selecting <span class="command">right click &gt; Add new agent</span> from the context menu.</li>
  <li>Your world should  look something like this.</li>
</ul>
<blockquote>
  <p align="left"><img src="images/four_objects.jpg" width="243" height="232"></p>
</blockquote>
<p>2. Modify object settings.</p>
<ul>
  <li>Right click on any of the four objects within the world and select <span class="command">Set object properties</span> from the context menu.</li>
  <li>Change the stimulus values as follows:</li>
  <li>For two of the objects, make each of the first five rows 0 except one, which should have a positive value. These are local representations. </li>
  <li>For the other two objects, make each of the first five rows have a different non-zero value. These are distributed representations.</li>
</ul>
<p>3. Create a network containing five nodes.</p>
<ul>
  <li>Add a new network to the workspace.</li>
  <li>Create four neurons.</li>
  <li>Set each of the neurons to input nodes by right clicking on the neuron and selecting <span class="command">sensors &gt; Odor World 1 &gt; Mouse 1 &gt; Center &gt; 1</span>. </li>
  <li>Repeat for the other four setting the input of each neuron to a different number. When finished, your network should look like this:
    <blockquote>
      <p><img src="images/5_inputnodes.png" width="314" height="113"></p>
    </blockquote>
  </li>
</ul>
<p>4. Observe local and distributed representations.</p>
<ul>
  <li>Within the world, move the mouse to one of the objects.</li>
  <li>Note network reaction.</li>
  <li>Repeat with other three objects. </li>
</ul>
<p class="heading2">Test Tolerance of Noisy Inputs </p>
<p>For this exercize, you will experiment to see how different levels of noise impact a network's ability to classify a set of objects.</p>
<p>1.Open the simulation <span class="command">lessons &gt; backprop_auto3.sim.</span> Note that in the objects have distributed representations, but that they are are classified by local output representations, as follows:</p>
<blockquote>
  <p>fish: (1,0,0)<br>
    gouda: (0,1,0)<br>
    blue: (0,0,1)<br>
  nothing: (0,0,0)</p>
</blockquote>
<p>You will have to understand this for the next exercize as well. </p>
<p>2. Add some noise to one of the objects. </p>
<ul>
  <li>Double click on one of the objects or right click on it and select <span class="command">set object properties. </span></li>
  <li>Go to the stimulus dispersion tab, and click <span class="command">add noise</span>.</li>
  <li>Set the <span class="command">noise level </span>to zero.</li>
  <li>Click Ok. </li>
  <li>Now move the mouse on top of the object on top of the object, and click play in the network panel 10 times. Note that it correctly produces the right response every time. </li>
</ul>
<p>3. Test for different levels of noise</p>
<ul>
  <li>Now add more and more noise to the object, and in each case note for how many out of 10 network iterations it produces the right response. </li>
  <li>Try this for noise levels of 25, 50, 75, and 100.</li>
  <li>Use the results to create a chart, like this one, which shows correct classification as a function of noise level. </li>
</ul>
<p><img src="images/InputNoise_Chart.png" width="326" height="257"></p>
<p class="heading2">&nbsp;</p>
<p class="heading2">Test graceful degradation during synapse loss </p>
<p>In this exercize you will use the same simulation as in the last one, but instead of testing how well it fares in the face of noisy inputs, you will see how well it holds up as it loses synapses. How &quot;gracefully&quot; does it degrade. </p>
<p>1. Re-open the simulation <span class="command">lessons &gt; backprop_auto3.sim.</span> Note that it correctly classifies the three objects, as described above, as well as the absence of objects.</p>
<p>2. Start eliminating synapses and see how well it performs as it loses them. </p>
<p>3. Now create a new chart. In this case you will keep track of what percentage of objects are classified correctly as you remove each synapse. You should end up with a chart which shows percentage classified correctly as a a function of synapses removed, like this:</p>
<p><img src="images/GracefulDegradation.png" width="375" height="253"> </p>
<blockquote>
  <p>&nbsp;</p>
</blockquote>
<p>For &quot;percent classified correctly&quot; move the mouse over each object and see if it classifies it correctly (producing the correct output vector). You will either get 4/4, 3/4, 2/4, 1/4, or 0/4, depending on how many of the objects + absence of objects are classified correctly. A network in perfect working order will identify the three objects correctly, as well as the absence of objects correctly. </p>
<p>Note that even though this and the above example have &quot;percent classified correctly&quot; on the y-axis, this means different things in each case. Above it meant how many times a <em>single stimulus </em>was classified correctly, in 10 trials of noisy input. Here it is what percentage of the <em>four stimuli </em> (each of the three objects and no object) is classified correctly. </p>
<p>Also note that correct classification of an object is taken to correspond to the mouse being right on top of the object. </p>
<p>4.You can also try removing the hidden layer units. Remarkable, the network can perform quite well even with 1 hidden unit!</p>
<p class="heading2">Summary of Work</p>
<p>When you are finished you should turn in three things.</p>
<ol>
  <li>Your local / distributed simulation.</li>
  <li>A chart showing percent correct classification of a single object (over 10 trial runs) as a function of input noise.</li>
  <li>A chart showing percent correct classification of all four objects as a function of removed synapses.</li>
</ol>
</body>
</html>
