import javax.swing.JOptionPane;
import org.simbrain.network.NetworkComponent;
import org.simbrain.network.layouts.LayersLayout;
import org.simbrain.network.networks.Backprop;
import org.simbrain.plot.timeseries.*;
import org.simbrain.workspace.*;
import org.simbrain.world.dataworld.DataWorldComponent;

{
            // Create Network
            NetworkComponent network = new NetworkComponent("Backprop Network");
            workspace.addWorkspaceComponent(network);
	    desktop.getDesktopComponent(network).getParentFrame().setBounds(46, 57, 400, 400);
            LayersLayout layout = new LayersLayout(40, 40, LayersLayout.HORIZONTAL);  // TODO: This should not be needed
            Backprop bp = new Backprop(network.getRootNetwork(), 3, 5, 3, layout);
            network.getRootNetwork().addNetwork(bp);
            bp.randomize();

            // Create Training Data
            DataWorldComponent trainingData = new DataWorldComponent("Training Data", 3, 3);
            workspace.addWorkspaceComponent(trainingData);
            trainingData.getDataModel().setIterationMode(true);
            trainingData.getDataModel().fill(new Double(0));
            trainingData.getDataModel().set(0, 0, new Double(1));
            trainingData.getDataModel().set(1, 1, new Double(1));
            trainingData.getDataModel().set(2, 2, new Double(1));
            trainingData.setName("Training Data");
            
            // Create input table
            DataWorldComponent inputData = new DataWorldComponent("Input Data",3,3);
            workspace.addWorkspaceComponent(inputData);
            inputData.getDataModel().setIterationMode(true);
            inputData.getDataModel().set(0, 0, new Double(1));
            inputData.getDataModel().set(1, 1, new Double(1));
            inputData.getDataModel().set(2, 2, new Double(1));
            inputData.setName("Input Data");
	    desktop.getDesktopComponent(inputData).getParentFrame().setBounds(508, 59, 300, 146);
            
            // Coupling input table columns to input neurons of backprop network
            ProducingAttribute column1 = inputData.getSingleProducingAttribute("Column1");
            ProducingAttribute column2 = inputData.getSingleProducingAttribute("Column2");
            ProducingAttribute column3 = inputData.getSingleProducingAttribute("Column3");
            ConsumingAttribute inputNeuron1 = network.getConsumingAttribute("Neuron_1", "Activation"); 
            ConsumingAttribute inputNeuron2 = network.getConsumingAttribute("Neuron_2", "Activation"); 
            ConsumingAttribute inputNeuron3 = network.getConsumingAttribute("Neuron_3", "Activation");
            workspace.getCouplingManager().addCoupling(new Coupling(column1, inputNeuron1));
            workspace.getCouplingManager().addCoupling(new Coupling(column2, inputNeuron2));
            workspace.getCouplingManager().addCoupling(new Coupling(column3, inputNeuron3));
            
            // Couple training table columns to  target values
            ProducingAttribute train1 = trainingData.getSingleProducingAttribute("Column1");
            ProducingAttribute train2 = trainingData.getSingleProducingAttribute("Column2");
            ProducingAttribute train3 = trainingData.getSingleProducingAttribute("Column3");
            ConsumingAttribute target1 = network.getConsumingAttribute("Neuron_9", "TargetValue"); 
            ConsumingAttribute target2 = network.getConsumingAttribute("Neuron_10", "TargetValue"); 
            ConsumingAttribute target3 = network.getConsumingAttribute("Neuron_11", "TargetValue"); 
            workspace.getCouplingManager().addCoupling(new Coupling(train1, target1));
            workspace.getCouplingManager().addCoupling(new Coupling(train2, target2));
            workspace.getCouplingManager().addCoupling(new Coupling(train3, target3));

            // Create Plot component
            TimeSeriesPlotComponent errorPlot = new TimeSeriesPlotComponent("Error Rate", 1);
            workspace.addWorkspaceComponent(errorPlot);
	    desktop.getDesktopComponent(errorPlot).getParentFrame().setBounds(509, 232, 351, 281);

            // Train network
            int epochs = Integer.parseInt(JOptionPane.showInputDialog("Number of epochs"));
            bp.setTrain(true);
            for(int i = 0; i < epochs; i++) {
                errorPlot.getModel().getDataset().getSeries(0).add(i, bp.getError());
		System.out.println("here" + i);
                workspace.singleUpdate();    
            }
            bp.setTrain(false);
            
	    // Set Update Method
            workspace.setCustomUpdateController(new BackpropUpdate(network, inputData));
	    
            // Close training data window
            trainingData.close();
            
            // Display Debug Info
            System.out.println(workspace); 
	    
	    // Custom updating method
            class BackpropUpdate implements WorkspaceUpdator.UpdateController {

                NetworkComponent network;
                DataWorldComponent inputData;
                
                public BackpropUpdate(NetworkComponent net, DataWorldComponent data) {
                    network = net;
                    inputData = data;
                }
                
                public void doUpdate(WorkspaceUpdator.UpdateController controller) {
                    
                    inputData.doUpdate();
		    controls.updateCouplings();
                    network.doUpdate();
                }
                
            }
	    
}
