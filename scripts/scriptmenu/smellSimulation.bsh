import java.awt.Point;
import java.awt.geom.Point2D;
import java.util.*;
import javax.swing.JInternalFrame;
import org.simbrain.network.neurons.*;
import org.simbrain.network.*;
import org.simbrain.network.connections.*;
import org.simbrain.network.core.*;
import org.simbrain.network.layouts.*;
import org.simbrain.network.layouts.LineLayout.LineOrientation;
import org.simbrain.network.neuron_update_rules.*;
import org.simbrain.network.synapse_update_rules.*;
import org.simbrain.network.desktop.NetworkDesktopComponent;
import org.simbrain.workspace.*;
import org.simbrain.world.odorworld.*;
import org.simbrain.world.odorworld.sensors.*;
import org.simbrain.world.odorworld.entities.*;
import org.simbrain.util.*;
import org.simbrain.util.environment.SmellSource;
import org.simbrain.plot.projection.*;

{

    // Layout variables
    int distance_from_top = 10;  
    int distance_from_left = 10;
    int buffer = 10;
    int componentWidth = desktop.getWidth()/3 - buffer;
    int componentHeight = desktop.getHeight() - buffer;

    // Init workspace
    workspace.clearWorkspace();

    // Make a 2-d environment
    OdorWorldComponent odorWorld = new OdorWorldComponent("Odor World");
    OdorWorld world = odorWorld.getWorld();
    workspace.addWorkspaceComponent(odorWorld);

    // Add agent to environment
    RotatingEntity mouse = new RotatingEntity(world);
    mouse.setLocation(162,200);
    world.addAgent(mouse);

    // Add objects
    BasicEntity object1 = new BasicEntity("Swiss.gif", world);
    object1.setLocation(36,107);
    object1.setSmellSource(
            new SmellSource(SimbrainMath.multVector(new double[]{0.7,0.3,0.0,0.0,0.0,0.0,0.0,0.0}
            , 100),
            SmellSource.DecayFunction.GAUSSIAN, 
            object1.getLocation()));
    world.addEntity(object1);	

    BasicEntity object2 = new BasicEntity("Gouda.gif", world);
    object2.setLocation(169,32);
    object2.setSmellSource(
            new SmellSource(SimbrainMath.multVector(new double[]{0.7,0.0,0.3,0.0,0.0,0.0,0.0,0.0}
            , 100),
            SmellSource.DecayFunction.GAUSSIAN, 
            object1.getLocation()));
    world.addEntity(object2);	

    BasicEntity object3 = new BasicEntity("Bluecheese.gif", world);
    object3.setLocation(304,87);
    object3.setSmellSource(
            new SmellSource(SimbrainMath.multVector(new double[]{0.7,0.0,0.0,0.0,0.3,0.0,0.0,0.0}
            , 100),
            SmellSource.DecayFunction.GAUSSIAN, 
            object1.getLocation()));
    world.addEntity(object3);

    BasicEntity object4 = new BasicEntity("Tulip.gif", world);
    object4.setLocation(80,351);
    object4.setSmellSource(
            new SmellSource(SimbrainMath.multVector(new double[]{0.0,0.3,0.0,0.7,0.0,0.0,0.0,0.0}
            , 100),
            SmellSource.DecayFunction.GAUSSIAN, 
            object1.getLocation()));
    world.addEntity(object4);

    BasicEntity object5 = new BasicEntity("Pansy.gif", world);
    object5.setLocation(251,370);
    object5.setSmellSource(
            new SmellSource(SimbrainMath.multVector(new double[]{0.0,0.0,0.3,0.7,0.0,0.0,0.0,0.0}
            , 100),
            SmellSource.DecayFunction.GAUSSIAN, 
            object1.getLocation()));
    world.addEntity(object5);	


    // Add Recurrent network
    source("./scripts/scriptmenu/sparseNetwork.bsh");
    NetworkComponent networkComponent = workspace.getComponent("Sparse Network");
    Network network = networkComponent.getNetwork();
    List targetNeurons = network.getFlatNeuronList();
    List sourceNeurons = new ArrayList();

    // Add input layer to recurrent network
    LineLayout layout = new LineLayout(-20,350,70, LineOrientation.HORIZONTAL);
    for (int i = 0; i < 5; i++) {
        Neuron neuron = new Neuron(network, "LinearRule");
        neuron.setLowerBound(0);
        neuron.setUpperBound(100);
        network.addNeuron(neuron);
        sourceNeurons.add(neuron);
    }
    layout.layoutNeurons(sourceNeurons);
    //((NetworkDesktopComponent)desktop.getDesktopComponent(networkComponent)).getNetworkPanel().centerCamera();

    // Connect input layer to main network
    Sparse sparseConnect = new Sparse(network, sourceNeurons, targetNeurons);
    //sparseConnect.setBaseExcitatorySynapse(new Hebbian(null, null));
    sparseConnect.setSparsity(.4);
    sparseConnect.setExcitatoryRatio(1);
    sparseConnect.connectNeurons();

    // Couple odor world to network
    String mouseId = mouse.getId();
    PotentialProducer smell1 = odorWorld.getAttributeManager().createPotentialProducer(world.getSensor(mouseId,"Sensor_2"), "getCurrentValue", double.class, new Class[]{int.class}, new Object[]{0}); 
    smell1.setCustomDescription("Sensor 1");
    PotentialProducer smell2 = odorWorld.getAttributeManager().createPotentialProducer(world.getSensor(mouseId,"Sensor_2"), "getCurrentValue", double.class, new Class[]{int.class}, new Object[]{1}); 
    smell2.setCustomDescription("Sensor 2");
    PotentialProducer smell3 = odorWorld.getAttributeManager().createPotentialProducer(world.getSensor(mouseId,"Sensor_2"), "getCurrentValue", double.class, new Class[]{int.class}, new Object[]{2}); 
    smell3.setCustomDescription("Sensor 3");
    PotentialProducer smell4 = odorWorld.getAttributeManager().createPotentialProducer(world.getSensor(mouseId,"Sensor_2"), "getCurrentValue", double.class, new Class[]{int.class}, new Object[]{3}); 
    smell4.setCustomDescription("Sensor 4");
    PotentialProducer smell5 = odorWorld.getAttributeManager().createPotentialProducer(world.getSensor(mouseId,"Sensor_2"), "getCurrentValue", double.class, new Class[]{int.class}, new Object[]{4}); 
    smell5.setCustomDescription("Sensor 5");
    PotentialConsumer inputNeuron1 = networkComponent.getAttributeManager().createPotentialConsumer(network.getNeuron("Neuron_26"), "setInputValue", double.class);
    inputNeuron1.setCustomDescription("Output neuron 1");
    PotentialConsumer inputNeuron2 = networkComponent.getAttributeManager().createPotentialConsumer(network.getNeuron("Neuron_27"), "setInputValue", double.class); 
    inputNeuron2.setCustomDescription("Output neuron 2");
    PotentialConsumer inputNeuron3 = networkComponent.getAttributeManager().createPotentialConsumer(network.getNeuron("Neuron_28"), "setInputValue", double.class); 
    inputNeuron3.setCustomDescription("Output neuron 3");
    PotentialConsumer inputNeuron4 = networkComponent.getAttributeManager().createPotentialConsumer(network.getNeuron("Neuron_29"), "setInputValue", double.class); 
    inputNeuron4.setCustomDescription("Output neuron 4");
    PotentialConsumer inputNeuron5 = networkComponent.getAttributeManager().createPotentialConsumer(network.getNeuron("Neuron_30"), "setInputValue", double.class); 
    inputNeuron5.setCustomDescription("Output neuron 5");
    workspace.getCouplingManager().addCoupling(new Coupling(smell1, inputNeuron1));
    workspace.getCouplingManager().addCoupling(new Coupling(smell2, inputNeuron2));
    workspace.getCouplingManager().addCoupling(new Coupling(smell3, inputNeuron3));
    workspace.getCouplingManager().addCoupling(new Coupling(smell4, inputNeuron4));
    workspace.getCouplingManager().addCoupling(new Coupling(smell5, inputNeuron5));

    // Create projection plot
    ProjectionComponent chart = new ProjectionComponent("Network Projection");
    workspace.addWorkspaceComponent(chart);


    // Couple network to projection chart
    for (int i = 1; i < 25; i++) {
        PotentialProducer neuronAttribute = networkComponent.getAttributeManager().createPotentialProducer(network.getNeuron("Neuron_" + i), "getActivation", double.class); 
        neuronAttribute.setCustomDescription("Neuron " + i);
        PotentialConsumer chartAttribute = chart.getAttributeManager().createPotentialConsumer(chart.getDimension(i-1), "setValue", double.class);
        chartAttribute.setCustomDescription( "Dimension " + i);
        workspace.getCouplingManager().addCoupling(new Coupling(neuronAttribute, chartAttribute));
    }
    
    // Position components
	JInternalFrame networkFrame = desktop.getDesktopComponent(networkComponent).getParentFrame(); 
	networkFrame.setBounds(distance_from_left, distance_from_top, componentWidth, componentHeight);
    
	JInternalFrame chartFrame = desktop.getDesktopComponent(chart).getParentFrame();
	chartFrame.setBounds(networkFrame.getX() + networkFrame.getWidth() + buffer, distance_from_top, componentWidth, componentHeight);
    
	desktop.getDesktopComponent(odorWorld).getParentFrame().setBounds(chartFrame.getX() + chartFrame.getWidth() + buffer, distance_from_top, componentWidth, componentHeight);




}
