import org.simbrain.network.NetworkComponent;
import org.simbrain.network.connections.*;
import org.simbrain.network.core.*;
import org.simbrain.network.layouts.*;
import org.simbrain.network.networks.*;
import org.simbrain.network.neuron_update_rules.*;
import org.simbrain.network.neuron_update_rules.interfaces.*;
import org.simbrain.workspace.*;
import org.simbrain.network.connections.*;
import org.simbrain.util.SimbrainConstants.Polarity;
import org.simbrain.util.randomizer.*;
import org.simbrain.util.math.*;
import java.util.*;

/* This script creates a small network of randomly-activated input units
 * connected to a Long Short Term Memory cell. The cell is a specialized
 * group of nodes which is capable of "gating" information into an
 * internal store and holding that information until it is no longer
 * relevant. LSTMs are able to outperform simple recurrent networks and
 * other unstructured networks on many time-sensitive tasks.
 * 
 * This code was derived from existing simbrain scripts and the LinearRule
 * in the network package. The LSTM implementation was based on the
 * wikipedia entry for LSTM.
 *
 * Tim Shea, 4/22/2015
 */
{
	// Define a new neuron update rule for product units (AND gates)
	// used in Long Short Term Memory cells
	private class ProductRule extends LinearRule {
		public void update(Neuron neuron) {
			val = 1;
			for (Synapse s : neuron.getFanIn()) {
				val *= s.calcWeightedSum();
			}
			
			if (getAddNoise()) {
				val += getNoiseGenerator().getRandom();
			}
			
			neuron.setBuffer(val);
		}
		
		public String getDescription() {
			return "Product";
		}
	}
	
	// Parameters
	int INPUTS = 25;
	double GRID_SPACE = 50;
	
	// Build Network
	NetworkComponent networkComponent = new NetworkComponent("LSTM Network");
	workspace.addWorkspaceComponent(networkComponent);
	Network network = networkComponent.getNetwork();
	
	// Create a grid of random input units to feed the LSTM
	GridLayout layout = new GridLayout(GRID_SPACE, GRID_SPACE, (int)Math.sqrt(INPUTS));
	layout.setInitialLocation(new Point(0, (int)GRID_SPACE));
	List<Neuron> inputs = new ArrayList();
	for (int i = 0; i < INPUTS; ++i) {
		Neuron neuron = new Neuron(network, "LinearRule");
		neuron.setLowerBound(-1);
		((LinearRule)neuron.getUpdateRule()).setAddNoise(true);
		((LinearRule)neuron.getUpdateRule()).getNoiseGenerator().setParam1(-1);
		network.addNeuron(neuron);
		inputs.add(neuron);
	}
	layout.layoutNeurons(inputs);
	
	// Create the four sigmoidal gates for the LSTM cell
	LineLayout gateLayout = new LineLayout(GRID_SPACE, LineLayout.LineOrientation.HORIZONTAL);
	gateLayout.setInitialLocation(new Point(0, 0));
	List<Neuron> gates = new ArrayList();
	for (int i = 0; i < 4; ++i) {
		Neuron neuron = new Neuron(network, "ContinuousSigmoidalRule");
		network.addNeuron(neuron);
		gates.add(neuron);
	}
	gateLayout.layoutNeurons(gates);
	
	// Fully connect the gates to the input layer and randomize the weights
	// The PDF range was selected to give interesting dynamics to watch
	List<Synapses> synapses = AllToAll.connectAllToAll(inputs, gates, false, false, true);
	PolarizedRandomizer excitatoryRandomizer = new PolarizedRandomizer(Polarity.EXCITATORY);
	excitatoryRandomizer.setParam2(60.0);
	PolarizedRandomizer inhibitoryRandomizer = new PolarizedRandomizer(Polarity.INHIBITORY);
	inhibitoryRandomizer.setParam2(60.0);
	ConnectionUtilities.randomizeAndPolarizeSynapses(synapses,
		excitatoryRandomizer, inhibitoryRandomizer, 0.5);
	
	// Create the four units of the LSTM cell, three products (AND gates) and one sum (OR gate)
	// The load unit allows the info value to enter the store if the gate 1 is high
	Neuron load = new Neuron(network, new ProductRule());
	network.addNeuron(load);
	load.setX(0); load.setY(-GRID_SPACE);
	
	// The maintain unit allows the store value to remain in the store if gate 2 is high
	Neuron maintain = new Neuron(network, new ProductRule());
	network.addNeuron(maintain);
	maintain.setX(GRID_SPACE); maintain.setY(-GRID_SPACE);
	
	// The store unit takes the sum of the load and maintain signals
	Neuron store = new Neuron(network, new LinearRule());
	network.addNeuron(store);
	store.setX(0); store.setY(-2 * GRID_SPACE);
	
	// The out unit allows the store value to be read out of the cell if gate 3 is high
	Neuron out = new Neuron(network, new ProductRule());
	network.addNeuron(out);
	out.setX(0); out.setY(-3 * GRID_SPACE);
	
	// Create the internal connections of the LSTM cell, set all connections to a strength of 1
	network.addSynapse(new Synapse(gates.get(0), load, 1));
	network.addSynapse(new Synapse(gates.get(1), load, 1));
	network.addSynapse(new Synapse(gates.get(2), maintain, 1));
	network.addSynapse(new Synapse(store, maintain, 1));
	network.addSynapse(new Synapse(load, store, 1));
	network.addSynapse(new Synapse(maintain, store, 1));
	network.addSynapse(new Synapse(gates.get(3), out, 1));
	network.addSynapse(new Synapse(store, out, 1));
	
	// Randomize the initial configuration
	network.randomizeNeurons();
	network.fireSynapsesUpdated();
}